/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SaleRecipientStruct = {
  preferUnstaked: boolean;
  percent: BigNumberish;
  beneficiary: string;
  memo: string;
  projectId: BigNumberish;
};

export type SaleRecipientStructOutput = [
  boolean,
  number,
  string,
  string,
  BigNumber
] & {
  preferUnstaked: boolean;
  percent: number;
  beneficiary: string;
  memo: string;
  projectId: BigNumber;
};

export interface NFTMarketInterface extends utils.Interface {
  contractName: "NFTMarket";
  functions: {
    "delist(address,uint256)": FunctionFragment;
    "list(address,uint256,uint256,(bool,uint16,address,string,uint256)[])": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "prices(address,uint256)": FunctionFragment;
    "purchase(address,uint256,address)": FunctionFragment;
    "recipientsOf(address,address,uint256,uint256)": FunctionFragment;
    "terminalDirectory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "delist",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [string, BigNumberish, BigNumberish, SaleRecipientStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "prices",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientsOf",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "terminalDirectory",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "delist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "terminalDirectory",
    data: BytesLike
  ): Result;

  events: {
    "Delisted(address,address,uint256)": EventFragment;
    "Listed(address,address,uint256,tuple[],uint256)": EventFragment;
    "Purchased(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Listed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchased"): EventFragment;
}

export type DelistedEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; _contract: string; _tokenId: BigNumber }
>;

export type DelistedEventFilter = TypedEventFilter<DelistedEvent>;

export type ListedEvent = TypedEvent<
  [string, string, BigNumber, SaleRecipientStructOutput[], BigNumber],
  {
    _from: string;
    _contract: string;
    _tokenId: BigNumber;
    _recipients: SaleRecipientStructOutput[];
    _price: BigNumber;
  }
>;

export type ListedEventFilter = TypedEventFilter<ListedEvent>;

export type PurchasedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    _from: string;
    _to: string;
    _contract: string;
    _tokenId: BigNumber;
    _price: BigNumber;
  }
>;

export type PurchasedEventFilter = TypedEventFilter<PurchasedEvent>;

export interface NFTMarket extends BaseContract {
  contractName: "NFTMarket";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delist(
      _contract: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    list(
      _contract: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _recipients: SaleRecipientStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    prices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    purchase(
      _contract: string,
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recipientsOf(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string, string, BigNumber] & {
        preferUnstaked: boolean;
        percent: number;
        beneficiary: string;
        memo: string;
        projectId: BigNumber;
      }
    >;

    terminalDirectory(overrides?: CallOverrides): Promise<[string]>;
  };

  delist(
    _contract: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  list(
    _contract: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    _recipients: SaleRecipientStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  prices(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  purchase(
    _contract: string,
    _tokenId: BigNumberish,
    _owner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recipientsOf(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, string, string, BigNumber] & {
      preferUnstaked: boolean;
      percent: number;
      beneficiary: string;
      memo: string;
      projectId: BigNumber;
    }
  >;

  terminalDirectory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    delist(
      _contract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    list(
      _contract: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _recipients: SaleRecipientStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    prices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      _contract: string,
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recipientsOf(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string, string, BigNumber] & {
        preferUnstaked: boolean;
        percent: number;
        beneficiary: string;
        memo: string;
        projectId: BigNumber;
      }
    >;

    terminalDirectory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Delisted(address,address,uint256)"(
      _from?: string | null,
      _contract?: string | null,
      _tokenId?: BigNumberish | null
    ): DelistedEventFilter;
    Delisted(
      _from?: string | null,
      _contract?: string | null,
      _tokenId?: BigNumberish | null
    ): DelistedEventFilter;

    "Listed(address,address,uint256,tuple[],uint256)"(
      _from?: string | null,
      _contract?: string | null,
      _tokenId?: BigNumberish | null,
      _recipients?: null,
      _price?: null
    ): ListedEventFilter;
    Listed(
      _from?: string | null,
      _contract?: string | null,
      _tokenId?: BigNumberish | null,
      _recipients?: null,
      _price?: null
    ): ListedEventFilter;

    "Purchased(address,address,address,uint256,uint256)"(
      _from?: null,
      _to?: string | null,
      _contract?: string | null,
      _tokenId?: BigNumberish | null,
      _price?: null
    ): PurchasedEventFilter;
    Purchased(
      _from?: null,
      _to?: string | null,
      _contract?: string | null,
      _tokenId?: BigNumberish | null,
      _price?: null
    ): PurchasedEventFilter;
  };

  estimateGas: {
    delist(
      _contract: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    list(
      _contract: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _recipients: SaleRecipientStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      _contract: string,
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recipientsOf(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    terminalDirectory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    delist(
      _contract: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    list(
      _contract: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _recipients: SaleRecipientStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchase(
      _contract: string,
      _tokenId: BigNumberish,
      _owner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recipientsOf(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    terminalDirectory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
